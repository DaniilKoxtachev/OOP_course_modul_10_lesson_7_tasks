#include <iostream>;
using namespace std;

class ICommand {
public:
    virtual void execute() = 0;
};

class Lamp {
public:

    void lamp_on() {
        cout << "Свет включен" << endl;
    }

    void lamp_off() {
        cout << "Свет выключен" << endl;
    }
};

class LampOnCommand : public ICommand {
private:
    Lamp* _lamp;

public:
    LampOnCommand(Lamp* lamp) : _lamp(lamp) {}

    virtual void execute() override {
        _lamp->lamp_on();
    }
};

class LampOffCommand : public ICommand {
private:
    Lamp* _lamp;

public:
    LampOffCommand(Lamp* lamp) : _lamp(lamp) {}

    virtual void execute() override {
        _lamp->lamp_off();
    }
};

class Conditioner {
public:
    void on() {
        cout << "Кондиционер включен" << endl;
    }

    void off() {
        cout << "Кондиционер выключен" << endl;
    }

    void set_heating_mode() {
        cout << "Включен режим обогрева" << endl;
    }

    void set_temperature(int temp) {
        cout << "Температура выставлена на " << temp << " градусов" << endl;
    }

};

class ConditionerOffCommand : public ICommand {
private:
    Conditioner* _conditioner;
public:
    ConditionerOffCommand(Conditioner* conditioner) : _conditioner(conditioner) {}

    virtual void execute() override {
        _conditioner->off();
    }
};

class ConditionerOnCommand : public  ICommand {
private:
    Conditioner* _conditioner;
public:
    ConditionerOnCommand(Conditioner* conditioner) : _conditioner(conditioner) {}

    virtual void execute() override {
        _conditioner->on();
        _conditioner->set_heating_mode();
        _conditioner->set_temperature(25);
    }
};

class RemoteControl {
private:
    ICommand* _command;
public:
    void set_command(ICommand* command) {
        _command = command;
    }

    void button() {
        _command->execute();
    }
};

int main() {
    setlocale(LC_ALL, "rus");

    RemoteControl* remote_control = new RemoteControl();

    Lamp* lamp = new Lamp();
    Conditioner* conditioner = new Conditioner();

    remote_control->set_command(new LampOnCommand(lamp));
    remote_control->button();

    remote_control->set_command(new ConditionerOnCommand(conditioner));
    remote_control->button();

    remote_control->set_command(new ConditionerOffCommand(conditioner));
    remote_control->button();

    remote_control->set_command(new LampOffCommand(lamp));
    remote_control->button();
    return 0;
}
